{"version":3,"sources":["components/Title.js","components/DadJoke.js","components/Bikes.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","_getDadJoke","a","fetch","response","json","jsonData","data","children","_updateDadJoke","setJoke","joke","DadJoke","useState","useEffect","console","log","title","selftext","service","createEnturService","clientName","_getMyBikeStations","getBikeRentalStationsByPosition","latitude","longitude","_setMyBikeStations","setBikeStations","myBikeStations","Station","props","station","name","bikesAvailable","spacesAvailable","Bikes","bikeStations","map","bikeStation","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yOASeA,G,YAPD,WACZ,OAAO,6BAEL,wBAAIC,UAAU,UAAd,iB,8BCDEC,EAAW,uCAAG,8BAAAC,EAAA,sEACKC,MAHJ,4DAED,cACZC,EADY,gBAEKA,EAASC,OAFd,cAEZC,EAFY,yBAGXA,EAASC,KAAKC,SAAS,GAAGD,MAHf,2CAAH,qDAMXE,EAAc,uCAAG,WAAOC,GAAP,eAAAR,EAAA,sEACFD,IADE,OACfU,EADe,OAErBD,EAAQC,GAFa,2CAAH,sDAoBLC,EAfC,WAAO,IAAD,EACIC,mBAAS,IADb,mBACbF,EADa,KACPD,EADO,KAQpB,OALAI,qBAAU,WACRC,QAAQC,IAAI,oBACZP,EAAeC,KACd,IAEK,yBAAKV,UAAU,WACrB,2BAAIW,EAAKM,OACT,2BAAIN,EAAKO,Y,QCtBPC,E,MAAUC,GAAmB,CACjCC,WAAY,yBAGRC,EAAkB,uCAAG,4BAAApB,EAAA,sEACNiB,EAAQI,gCAAgC,CACzDC,SAAU,UACVC,UAAW,WACV,KAJsB,cACnBlB,EADmB,yBAKlBA,GALkB,2CAAH,qDAQlBmB,EAAkB,uCAAG,WAAOC,GAAP,eAAAzB,EAAA,sEACIoB,IADJ,OACnBM,EADmB,OAEzBD,EAAgBC,GAFS,2CAAH,sDAsBlBC,EAAU,SAACC,GAAW,IAAD,EACyBA,EAAMC,QAAhDC,EADiB,EACjBA,KAAMC,EADW,EACXA,eAAgBC,EADL,EACKA,gBAE9B,OACE,6BACE,2BAAIF,EAAJ,KAAYC,EAAZ,IAA6BC,EAAgBD,KAKpCE,EA3BD,WAAO,IAAD,EACsBtB,mBAAS,IAD/B,mBACXuB,EADW,KACGT,EADH,KAQlB,OALAb,qBAAU,WACRC,QAAQC,IAAI,kBACZU,EAAmBC,KAClB,IAGD,yBAAK3B,UAAU,YACZoC,EAAaC,KACZ,SAACC,GAAD,OAAiB,kBAAC,EAAD,CAASP,QAASO,SCb5BC,EAVH,WACV,OACE,yBAAKvC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.e075db4d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Title = () => {\n  return <div>\n    {/* <img src=\"./assets/logo.svg\" alt=\"react logo\"/> */}\n    <h1 className=\"Header\">Infoskjerm</h1>\n  </div>\n}\n\nexport default Title;","import React, { useEffect, useState } from \"react\";\n\nconst DAD_JOKE_API = 'https://www.reddit.com/r/dadjokes/top.json?t=day&limit=1';\n\nconst _getDadJoke = async () => {\n  const response = await fetch(DAD_JOKE_API);\n  const jsonData = await response.json();\n  return jsonData.data.children[0].data;\n}\n\nconst _updateDadJoke = async (setJoke) => {\n  const joke = await _getDadJoke();\n  setJoke(joke);\n}\n\nconst DadJoke = () => {\n  const [joke, setJoke] = useState({})\n\n  useEffect(() => {\n    console.log('Dadjoke rendered');\n    _updateDadJoke(setJoke)\n  }, [])\n\n  return (<div className='DadJoke'>\n    <p>{joke.title}</p>\n    <p>{joke.selftext}</p>\n  </div>\n  );\n}\n\nexport default DadJoke;","import React, { useEffect, useState } from 'react';\nimport createEnturService from '@entur/sdk';\n\nconst service = createEnturService({\n  clientName: 'tveit-infoskjermkurs',\n});\n\nconst _getMyBikeStations = async () => {\n  const data = await service.getBikeRentalStationsByPosition({\n    latitude: 63.428311,\n    longitude: 10.392514\n  }, 230);\n  return data;\n};\n\nconst _setMyBikeStations = async (setBikeStations) => {\n  const myBikeStations = await _getMyBikeStations();\n  setBikeStations(myBikeStations);\n};\n\nconst Bikes = () => {\n  const [bikeStations, setBikeStations] = useState([]);\n\n  useEffect(() => {\n    console.log('Rendered Bikes');\n    _setMyBikeStations(setBikeStations);\n  }, [])\n\n  return (\n    <div className=\"Stations\">\n      {bikeStations.map(\n        (bikeStation) => <Station station={bikeStation}/>\n      )}\n    </div>\n  );\n};\n\nconst Station = (props) => {\n  const { name, bikesAvailable, spacesAvailable } = props.station;\n\n  return (\n    <div>\n      <p>{name}: {bikesAvailable}/{spacesAvailable+bikesAvailable}</p>\n    </div>\n  )\n}\n\nexport default Bikes;","import React from 'react';\nimport './App.css';\n\n/* Local imports */\nimport Title from './components/Title';\nimport DadJoke from './components/DadJoke';\nimport Bikes from './components/Bikes';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Title />\n      <DadJoke />\n      <Bikes />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}